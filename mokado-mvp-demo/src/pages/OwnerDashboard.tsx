
import React from 'react'
import { supabase } from '../lib/supabase'
import Nav from '../components/Nav'

type Cafe = { id: string, name: string }

export default function OwnerDashboard() {
  const [cafes, setCafes] = React.useState<Cafe[]>([])
  const [name, setName] = React.useState('')
  const [pin, setPin] = React.useState('')
  const [selected, setSelected] = React.useState<string>('')
  const [stats, setStats] = React.useState<{today:number, week:number, month:number} | null>(null)

  React.useEffect(() => {
    (async () => {
      const { data: me } = await supabase.from('profiles').select('id,role').eq('id', (await supabase.auth.getUser()).data.user?.id).single()
      if (me?.role !== 'owner') {
        alert('You are not an owner. Ask support to upgrade your role.')
      }
      await loadCafes()
    })()
  }, [])

  async function loadCafes() {
    const { data: c } = await supabase.from('cafes').select('id,name').order('created_at', { ascending: true })
    setCafes(c || [])
  }

  async function createCafe() {
    if (!name || !pin) return alert('Name and PIN required')
    const { data: inserted, error } = await supabase.from('cafes').insert({ name, owner_id: (await supabase.auth.getUser()).data.user?.id }).select('id').single()
    if (error) return alert(error.message)
    const cafe_id = inserted.id
    // store settings with bcrypt hash generated by Postgres
    const { error: e2 } = await supabase.from('cafe_settings').insert({
      cafe_id,
      barista_pin_hash: (await supabase.rpc('gen_hash', { raw: pin })).data // fallback if function exists
    })
    if (e2) {
      // if helper isn't present, store plaintext (MVP) — recommended to replace by SQL call in schema
      await supabase.from('cafe_settings').insert({ cafe_id, barista_pin_hash: pin })
    }
    setName(''); setPin(''); loadCafes()
  }

  async function fetchStats(cafe_id: string) {
    setSelected(cafe_id)
    const { data: today } = await supabase.rpc('count_tx', { cafe: cafe_id, win: 'day' })
    const { data: week } = await supabase.rpc('count_tx', { cafe: cafe_id, win: 'week' })
    const { data: month } = await supabase.rpc('count_tx', { cafe: cafe_id, win: 'month' })
    setStats({ today: today||0, week: week||0, month: month||0 })
  }

  return (
    <div className="container">
      <Nav role="owner" />
      <div className="row">
        <div className="card" style={{ flex: 1, minWidth: 280 }}>
          <h3>Create café</h3>
          <div className="row">
            <input placeholder="Café name" value={name} onChange={e=>setName(e.target.value)} />
            <input placeholder="Barista PIN (4 digits)" value={pin} onChange={e=>setPin(e.target.value)} />
            <button className="button" onClick={createCafe}>Create</button>
          </div>
          <p className="small">After creating, print the QR: <code>/scan?cafe=&lt;cafe_id&gt;</code></p>
        </div>
        <div className="card" style={{ flex: 2, minWidth: 280 }}>
          <h3>Your cafés</h3>
          <table>
            <thead><tr><th>Name</th><th>QR</th><th>Stats</th></tr></thead>
            <tbody>
              {cafes.map(c => (
                <tr key={c.id}>
                  <td>{c.name}</td>
                  <td><a target="_blank" href={`/scan?cafe=${c.id}`}>Open QR link</a></td>
                  <td><button className="button" onClick={() => fetchStats(c.id)}>View</button></td>
                </tr>
              ))}
            </tbody>
          </table>
          {stats && (
            <div className="small" style={{marginTop:12}}>
              <div>Today: <strong>{stats.today}</strong> stamps</div>
              <div>This week: <strong>{stats.week}</strong> stamps</div>
              <div>This month: <strong>{stats.month}</strong> stamps</div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
